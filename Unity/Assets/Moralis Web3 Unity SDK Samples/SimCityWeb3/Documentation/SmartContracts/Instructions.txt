///////////////////////////////////////////////////////////
// Instructions.txt
//
// The complete Unity Game is included in this repo. However, the Unity game depends on 
// each Moralis Customer to create and deploy contract(s) on the blockchain
//      * Follow the full, numbered instructions below to create everything needed from scratch.
//      * If you have questions, compare your results to these complete files at
//              "./Unity/Assets/Moralis Web3 Unity SDK Samples/SimCityWeb3/Documentation/SmartContracts/HardHat/"
//      * When complete, paste the {YourContractAddress} and {YourABI} within Unity at
//              "./Unity/Assets/Moralis Web3 Unity SDK Samples/SimCityWeb3/Scripts/Runtime/SimCityWeb3/Model/Data/Types/PropertyContract.cs"
//
///////////////////////////////////////////////////////////

// 1. INSTALL NODEJS

    https://nodejs.org/en/download/
    
    
// 2. CREATE EMPTY FOLDER OUTSIDE OF GIT. OPEN IN TEXT EDITOR (E.G. VISUAL STUDIO CODE)


// 3. INSTALL HARDHAT via COMMAND LINE

    npm i -D hardhat
    npx hardhat


// 4. INSTALL DEPENDENCIES via COMMAND LINE

    npm i -D @openzeppelin/contracts
    npm i -D @nomiclabs/hardhat-waffle
    npm i -D @nomiclabs/hardhat-etherscan


// 5. RENAME "./contracts/Greeter.sol" TO "./contracts/{YourContractName}.sol" (WITHOUT {} of course)

// 6. RENAME "./scripts/sample_script.js" to "./scripts/deploy{YourContractName}.js" (WITHOUT {} of course)

// 7. IN "./scripts/deploy{YourContractName}.sol", RENAME "Greeter" TO {YourContractName} AND "greeter" to {yourContractName}. Respect existing letter-casing

// 8. IN "./scripts/deploy{YourContractName}.sol", ENSURE THE "deploy()" function has the correct contract constructor parameters

// 9. IN "./scripts/deploy{YourContractName}.sol", MODIFY TO ADD ETHERSCAN VERIFICATION. Then REPLACE {YourContractName}

    await {YourContractName}.deployTransaction.wait(5);
    
    // We verify the contract
    await hre.run("verify:verify", {
        address: {YourContractName}.address,
        constructorArguments: [],
    });


// 10. IN "./hardhat.config.js", ADD THIS REQUIRE TO THE TOP:

    require("@nomiclabs/hardhat-etherscan");


// 11. IN "./hardhat.config.js", ADD THESE FIELDS BEFORE "module.exports" part:

    const PRIVATE_KEY = "";           // Populate from MetaMask, after sign-in
    const POLYGONSCAN_API_KEY = "";   // Populate from polygonscan.com, after sign-in
    const MUMBAI_NETWORK_URL = "";    // Populate as described below

    UPDATE: Since the creation of this repo and related videos there has been a technical change. Now, populate the MUMBAI_NETWORK_URL from the value you set up on https://moralis.io/largenodes. For more information see https://github.com/MoralisWeb3/changelog/blob/main/2022-07-11-speedy-node-removal.md


// 12. IN "./hardhat.config.js", MODIFY "module.exports" WITH YOUR NEEDS, LIKE THIS:

    module.exports = {
      solidity: "0.8.7",
      networks: {
        mumbai: {
          url: MUMBAI_NETWORK_URL,
          accounts: [PRIVATE_KEY]
        }
      },
      etherscan: {
        apiKey: POLYGONSCAN_API_KEY 
      }
    };


// 13. COMPILE SMART CONTRACT via COMMAND LINE

    npx hardhat clean
    
    npx hardhat compile


// 14. RUN "./scripts/deploy{YourContractName}.js" TO DEPLOY SMART CONTRACT via COMMAND LINE

    npx hardhat run scripts/deployProperty.js --network mumbai
        
        
// 15. UPON SUCCESS SEE OUTPUT via COMMAND LINE WHICH RESEMBLES "deployed to: {YourContractAddress}"

    Visit "https://mumbai.polygonscan.com/address/{YourContractAddress}#code" in the browser to find {YourContractAddress} and {YourABI}.
     
    Reread the instructions atop this page to use {YourContractAddress} and the {YourABI} in Unity.
    
    Congratulations, you are done!
 

///////////////////////////////////////////////////////////

